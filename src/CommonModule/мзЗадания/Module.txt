
// { Менеджер заданий
Функция ЗапуститьМенеджераЗаданий() Экспорт
	ОстановитьМенеджераЗаданий();
	
	РегламентноеЗадание = РегламентныеЗадания.СоздатьРегламентноеЗадание(Метаданные.РегламентныеЗадания.мзМенеджерЗаданий);
	РегламентноеЗадание.Записать();
	
	Возврат РегламентноеЗадание.УникальныйИдентификатор;
КонецФункции

Процедура МенеджерЗаданий_Выполнение() Экспорт
	АктивныеИсполнители = ПолучитьАктивныхИсполнителей();
	ОсвободитьЗаданияБезАктивныхИсполнителей(АктивныеИсполнители);
	ЗапуститьНовыхИсполнителей(АктивныеИсполнители);
	СократитьИсториюВыполненияЗаданийДоГлубиныХраненияИзНастроек();
КонецПроцедуры

Процедура ЗапуститьНовыхИсполнителей(АктивныеИсполнители)
	КоличесвоЗаданийВОчереди = ПолучитьКоличесвоЗаданийВОчереди();
	ОграничениеПоКоличествуИсполнителей = ПолучитьОграничениеНаКоличествоИсполнителей();
	КоличествоДобавляемыхИсполнителей = Мин(ОграничениеПоКоличествуИсполнителей - АктивныеИсполнители.Количество(), КоличесвоЗаданийВОчереди);
	Если КоличествоДобавляемыхИсполнителей > 0 Тогда
		Задания = ПолучитьЗаданияИзОчереди(КоличествоДобавляемыхИсполнителей);
		Для каждого КлючЗадания Из Задания Цикл
			КлючИдентификацииИсполнителя = СгенерироватьКлючИдентификацииИсполнителя();
			ЗапуститьИсполнителя(КлючИдентификацииИсполнителя, КлючЗадания);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура СократитьИсториюВыполненияЗаданийДоГлубиныХраненияИзНастроек()
	ГлубинаХраненияИстории = ПолучитьГлубинуХраненияИстории();
	ПредопределенныеЗначенияГлубиныХраненияИстории = мзЗадания.ПолучитьПредопределенныеЗначенияГлубиныХраненияИстории();
	Если ГлубинаХраненияИстории <> ПредопределенныеЗначенияГлубиныХраненияИстории.Бесконечная Тогда
		СократитьИсториюВыполненияЗаданий(ГлубинаХраненияИстории);
	КонецЕсли;
КонецПроцедуры

Процедура ОстановитьМенеджераЗаданий() Экспорт
	Отбор = Новый Структура("Метаданные", Метаданные.РегламентныеЗадания.мзМенеджерЗаданий);
	АктивныеРегламентныеЗадания = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Отбор);
	Для каждого РегЗадание Из АктивныеРегламентныеЗадания Цикл
		РегЗадание.Удалить();
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьОграничениеНаКоличествоИсполнителей() Экспорт
	ОграничениеНаКоличествоИсполнителей = Константы.мзОграничениеНаКоличествоИсполнителей.Получить();
	
	Возврат ОграничениеНаКоличествоИсполнителей;
КонецФункции

Процедура УстановитьОграничениеПоКоличествуИсполнителей(ОграничениеНаКоличествоИсполнителей) Экспорт
	Константы.мзОграничениеНаКоличествоИсполнителей.Установить(ОграничениеНаКоличествоИсполнителей);
КонецПроцедуры

Функция ПолучитьГлубинуХраненияИстории() Экспорт
	ГлубинаХраненияИстории = Константы.мзГлубинаХраненияИстории.Получить();
	
	Возврат ГлубинаХраненияИстории;
КонецФункции

Процедура УстановитьГлубинуХраненияИстории(ГлубинаХраненияИстории) Экспорт
	Константы.мзГлубинаХраненияИстории.Установить(ГлубинаХраненияИстории);
КонецПроцедуры
// }

// { Исполнитель заданий
Функция ЗапуститьИсполнителя(КлючИдентификацииИсполнителя, КлючЗадания) Экспорт
	Параметры = Новый Массив;
	Параметры.Добавить(КлючИдентификацииИсполнителя);
	Параметры.Добавить(КлючЗадания);
	Фоновое = ФоновыеЗадания.Выполнить("мзЗадания.Исполнитель_Выполнение", Параметры, КлючИдентификацииИсполнителя);
КонецФункции

Процедура Исполнитель_Выполнение(КлючИдентификацииИсполнителя, КлючЗадания) Экспорт
	КлючИсполнителя = ИдентифицироватьИсполнителя(КлючИдентификацииИсполнителя);
	ДеталиЗадания = ВзятьЗаданиеВРаботу(КлючЗадания, КлючИсполнителя);
	Если ЗначениеЗаполнено(ДеталиЗадания) Тогда
		Выполнить(ДеталиЗадания.ИмяМетода + "(ДеталиЗадания.Параметры)");
		ОтметитьЗавершениеЗадания(КлючЗадания);
	КонецЕсли;
КонецПроцедуры

Функция ИдентифицироватьИсполнителя(КлючИдентификацииИсполнителя)
	Отбор = Новый Структура("Ключ", КлючИдентификацииИсполнителя);
	МассивФоновых = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	ТекущееФоновое = МассивФоновых[0];
	КлючИсполнителя = ТекущееФоновое.УникальныйИдентификатор;
	
	Возврат КлючИсполнителя;
КонецФункции

Функция ПолучитьАктивныхИсполнителей() Экспорт
	Отбор = Новый Структура("ИмяМетода", "мзЗадания.Исполнитель_Выполнение");
	ВсеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	АктивныеИсполнители = Новый Массив;
	Для каждого Фоновое Из ВсеФоновыеЗадания Цикл
		Если Фоновое.Состояние = СостояниеФоновогоЗадания.Активно Тогда
			АктивныеИсполнители.Добавить(Фоновое);
		КонецЕсли;
	КонецЦикла;
	
	Возврат АктивныеИсполнители;
КонецФункции

Функция ПолучитьКоличествоАктивныхИсполнителей() Экспорт
	Возврат ПолучитьАктивныхИсполнителей().Количество();
КонецФункции

Процедура ОстановитьАктивныхИсполнителей() Экспорт
	АктивныеИсполнители = ПолучитьАктивныхИсполнителей();
	Для каждого АктивныйИсполнитель из АктивныеИсполнители цикл
		Если АктивныйИсполнитель.Состояние = СостояниеФоновогоЗадания.Активно Тогда
			 АктивныйИсполнитель.Отменить();
		КонецЕсли;	 
	КонецЦикла;
КонецПроцедуры
// }

// { Задания
Функция ДобавитьЗадание(ИмяМетода, Параметры) Экспорт
	Задание = ПодготовитьМенеджераЗаписиЗадания(ИмяМетода, Параметры);
	Задание.Состояние = Перечисления.мзСостоянияЗаданий.Ожидает;
	Задание.Записать();
	
	Возврат Задание.Ключ;
КонецФункции

Функция ПодготовитьМенеджераЗаписиЗадания(ИмяМетода, Параметры)
	Если ТипЗнч(Параметры) <> Тип("Структура") Тогда
		ВызватьИсключение ПолучитьВозможныеИсключения().ПараметрыЗаданияДолжныБытьСтруктурой;
	КонецЕсли;
	
	КлючЗадания = Новый УникальныйИдентификатор();
	Параметры.Вставить("КлючЗадания", КлючЗадания);
	
	Задание = РегистрыСведений.мзЗадания.СоздатьМенеджерЗаписи();
	Задание.Период = ТекущаяДата();
	Задание.Ключ = КлючЗадания;
	Задание.ИмяМетода = ИмяМетода;
	Задание.Параметры = Новый ХранилищеЗначения(Параметры, Новый СжатиеДанных(0));
	
	Возврат Задание;
КонецФункции

Функция ДобавитьЗаданиеВнеОчереди(ИмяМетода, Параметры) Экспорт
	Задание = ПодготовитьМенеджераЗаписиЗадания(ИмяМетода, Параметры);
	Задание.Состояние = Перечисления.мзСостоянияЗаданий.ОжидаетВыделенногоИсполнителя;
	Задание.Записать();
	
	КлючИдентификацииИсполнителя = СгенерироватьКлючИдентификацииИсполнителя();
	ЗапуститьИсполнителя(КлючИдентификацииИсполнителя, Задание.Ключ);
	
	Возврат Задание.Ключ;
КонецФункции

Функция ВзятьЗаданиеВРаботу(КлючЗадания, КлючИсполнителя)
	ДеталиЗадания = Неопределено;
	НаборЗаписей = ПолучитьЗаполненныйНаборЗаписейПоКлючуЗадания(КлючЗадания);
	Если НаборЗаписей.Количество() = 1 Тогда
		Задание = НаборЗаписей[0];
		
		ДеталиЗадания = Новый Структура("ИмяМетода, Параметры");
		ДеталиЗадания.ИмяМетода = Задание.ИмяМетода;
		ДеталиЗадания.Параметры = Задание.Параметры.Получить();
		
		Задание.КлючИсполнителя = КлючИсполнителя;
		Задание.Состояние = Перечисления.мзСостоянияЗаданий.Выполняется;
		Задание.НачалоВыполнения = ТекущаяДата();
		Задание.КоличествоПопытокВыполения = Задание.КоличествоПопытокВыполения + 1;
		
		НаборЗаписей.Записать();
	КонецЕсли;
	
	Возврат ДеталиЗадания;
КонецФункции

Процедура ОтметитьЗавершениеЗадания(КлючЗадания)
	НаборЗаписей = ПолучитьЗаполненныйНаборЗаписейПоКлючуЗадания(КлючЗадания);
	Если НаборЗаписей.Количество() = 1 Тогда
		Задание = НаборЗаписей[0];
		Задание.Состояние = Перечисления.мзСостоянияЗаданий.Выполнено;
		Задание.ЗавершениеВыполнения = ТекущаяДата();
		НаборЗаписей.Записать();
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьСостояниеЗадания(КлючЗадания) Экспорт
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	мзЗадания.Состояние
	|ИЗ
	|	РегистрСведений.мзЗадания КАК мзЗадания
	|ГДЕ
	|	мзЗадания.Ключ = &КлючЗадания";
	Запрос.УстановитьПараметр("КлючЗадания", КлючЗадания);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Результат = РезультатЗапроса.Выгрузить()[0].Состояние;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ОжидатьСостояниеЗадания(КлючЗадания, ОжидаемоеСостояние, Таймаут = 5) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Истина КАК ДождалисьСостояния
	|ИЗ
	|	РегистрСведений.мзЗадания КАК мзЗадания
	|ГДЕ
	|	мзЗадания.Ключ = &КлючЗадания
	|	И мзЗадания.Состояние = &ОжидаемоеСостояние";
	Запрос.УстановитьПараметр("КлючЗадания", КлючЗадания);
	Запрос.УстановитьПараметр("ОжидаемоеСостояние", ОжидаемоеСостояние);
	
	ВремяВРаботе = 0;
	ДождалисьСостояния = Ложь;
	Пока ВремяВРаботе < Таймаут Цикл
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			ДождалисьСостояния = Истина;
			Прервать;
		КонецЕсли;
		
		ВремяВРаботе = ВремяВРаботе + Спать(1);
	КонецЦикла;
	
	Возврат ДождалисьСостояния;
КонецФункции

Функция ОжидатьИзмененияСостояния(КлючЗадания, ТекущееСостояние, Таймаут = 5) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Истина КАК СостояниеИзменилось
	|ИЗ
	|	РегистрСведений.мзЗадания КАК мзЗадания
	|ГДЕ
	|	мзЗадания.Ключ = &КлючЗадания
	|	И мзЗадания.Состояние <> &ТекущееСостояние";
	Запрос.УстановитьПараметр("КлючЗадания", КлючЗадания);
	Запрос.УстановитьПараметр("ТекущееСостояние", ТекущееСостояние);
	
	ВремяВРаботе = 0;
	СостояниеИзменилось = Ложь;
	Пока ВремяВРаботе < Таймаут Цикл
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			СостояниеИзменилось = Истина;
			Прервать;
		КонецЕсли;
		
		ВремяВРаботе = ВремяВРаботе + Спать(1);
	КонецЦикла;
	
	Возврат СостояниеИзменилось;
КонецФункции

Функция ПолучитьКоличесвоЗаданийВОчереди() Экспорт
	КоличесвоЗаданийВОчереди = ПолучитьЗаданияИзОчереди(Неопределено).Количество();
	
	Возврат КоличесвоЗаданийВОчереди;
КонецФункции

Функция ПолучитьЗаданияИзОчереди(КоличествоЗаданий = Неопределено)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	мзЗадания.Ключ
	|ИЗ
	|	РегистрСведений.мзЗадания КАК мзЗадания
	|ГДЕ
	|	мзЗадания.КлючИсполнителя = &ПустойУникальныйИдентификатор
	|	И мзЗадания.Состояние = ЗНАЧЕНИЕ(Перечисление.мзСостоянияЗаданий.Ожидает)
	|
	|УПОРЯДОЧИТЬ ПО
	|	мзЗадания.КоличествоПопытокВыполения,
	|	мзЗадания.Период";
	ТекстЗамены = "";
	Если ТипЗнч(КоличествоЗаданий) = Тип("Число") И КоличествоЗаданий >= 0 Тогда
		ТекстЗамены = "ПЕРВЫЕ " + Формат(КоличествоЗаданий, "ЧН=0; ЧГ=0");
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1", ТекстЗамены);
	Запрос.УстановитьПараметр("ПустойУникальныйИдентификатор", ПустойУникальныйИдентификатор());
	РезультатЗапроса = Запрос.Выполнить();
	Задания = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ключ");
	
	Возврат Задания;
КонецФункции

Функция ОтменитьЗадание(КлючЗадания) Экспорт
	Успех = Ложь;
	НаборЗаписей = ПолучитьЗаполненныйНаборЗаписейПоКлючуЗадания(КлючЗадания);
	Если НаборЗаписей.Количество() = 1 Тогда
		Задание = НаборЗаписей[0];
		Если Задание.Состояние = Перечисления.мзСостоянияЗаданий.Ожидает Тогда
			Успех = Истина;
			Задание.Состояние = Перечисления.мзСостоянияЗаданий.Отменено;
			Задание.ЗавершениеВыполнения = ТекущаяДата();
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
	Возврат Успех;
КонецФункции

Процедура ОтменитьВсеЗаданияВОчереди() Экспорт
	ВсеЗаданияИзОчереди = ПолучитьЗаданияИзОчереди(Неопределено);
	Для каждого КлючЗадания Из ВсеЗаданияИзОчереди Цикл
		ОтменитьЗадание(КлючЗадания);
	КонецЦикла;
КонецПроцедуры

Процедура ОсвободитьЗаданияБезАктивныхИсполнителей(АктивныеИсполнители)
	МассивУИИсполнителей = Новый Массив();
	Для каждого Исполнитель Из АктивныеИсполнители Цикл
		МассивУИИсполнителей.Добавить(Исполнитель.УникальныйИдентификатор);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	мзЗадания.Период,
	|	мзЗадания.Ключ,
	|	мзЗадания.ИмяМетода,
	|	мзЗадания.Параметры,
	|	мзЗадания.КоличествоПопытокВыполения
	|ИЗ
	|	РегистрСведений.мзЗадания КАК мзЗадания
	|ГДЕ
	|	мзЗадания.КлючИсполнителя <> &ПустойУникальныйИдентификатой
	|	И НЕ мзЗадания.КлючИсполнителя В (&МассивУИИсполнителей)
	|	И мзЗадания.Состояние = ЗНАЧЕНИЕ(Перечисление.мзСостоянияЗаданий.Выполняется)";
	Запрос.УстановитьПараметр("МассивУИИсполнителей", МассивУИИсполнителей);
	ПустойУникальныйИдентификатой = ПустойУникальныйИдентификатор();
	Запрос.УстановитьПараметр("ПустойУникальныйИдентификатой", ПустойУникальныйИдентификатой);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Задание = РегистрыСведений.мзЗадания.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Задание, Выборка);
		Задание.КлючИсполнителя = ПустойУникальныйИдентификатой;
		Задание.Состояние = Перечисления.мзСостоянияЗаданий.Ожидает;
		Задание.Записать();
	КонецЦикла;
КонецПроцедуры
// }

// { Служебные
Функция ПолучитьВозможныеИсключения() Экспорт
	ВозможныеИсключения = Новый Структура();
	ВозможныеИсключения.Вставить("ПараметрыЗаданияДолжныБытьСтруктурой", "Параметры задания могут быть только типом Структура");
	
	Возврат Новый ФиксированнаяСтруктура(ВозможныеИсключения);
КонецФункции

Функция ПолучитьПредопределенныеЗначенияГлубиныХраненияИстории() Экспорт
	ПредопределенныеЗначенияГлубиныХраненияИстории = Новый Структура();
	ПредопределенныеЗначенияГлубиныХраненияИстории.Вставить("Бесконечная", 0);
	ПредопределенныеЗначенияГлубиныХраненияИстории.Вставить("День", 1);
	ПредопределенныеЗначенияГлубиныХраненияИстории.Вставить("Неделя", 7);
	ПредопределенныеЗначенияГлубиныХраненияИстории.Вставить("Месяц", 30);
	
	Возврат Новый ФиксированнаяСтруктура(ПредопределенныеЗначенияГлубиныХраненияИстории);
КонецФункции

Функция ПустойУникальныйИдентификатор() Экспорт
	Возврат Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
КонецФункции

Функция Спать(Секунды) Экспорт
	Команда = "ping -n " + Формат(Секунды + 1, "ЧДЦ=0; ЧГ=") + " -w 2000 0.0.0.1";
	ЗапуститьПриложение(Команда, , Истина);
	
	Возврат Секунды;
КонецФункции

Функция ПолучитьПрефиксКлючаИсполнителей()
	Возврат "мз_";
КонецФункции

Функция СгенерироватьКлючИдентификацииИсполнителя()
	Возврат ПолучитьПрефиксКлючаИсполнителей() + Строка(Новый УникальныйИдентификатор());
КонецФункции

Функция ПолучитьЗаполненныйНаборЗаписейПоКлючуЗадания(КлючЗадания) Экспорт
	НаборЗаписей = РегистрыСведений.мзЗадания.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Ключ.Установить(КлючЗадания);
	НаборЗаписей.Прочитать();
	
	Возврат НаборЗаписей;
КонецФункции

Функция ПолучитьОдинДень() Экспорт
	ОдинДень = 24 * 60 * 60;
	
	Возврат ОдинДень;
КонецФункции

Процедура СократитьИсториюВыполненияЗаданий(ТребуемаяГлубинаИсторииВДнях) Экспорт
	МинимальныйПериодИстории = ТекущаяДата() - ПолучитьОдинДень() * ТребуемаяГлубинаИсторииВДнях;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	мзЗадания.Ключ
	|ИЗ
	|	РегистрСведений.мзЗадания КАК мзЗадания
	|ГДЕ
	|	мзЗадания.Период < &МинимальныйПериодИстории
	|	И НЕ мзЗадания.Состояние В (ЗНАЧЕНИЕ(Перечисление.мзСостоянияЗаданий.Ожидает), ЗНАЧЕНИЕ(Перечисление.мзСостоянияЗаданий.Выполняется))";
	Запрос.УстановитьПараметр("МинимальныйПериодИстории", МинимальныйПериодИстории);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	НаборЗаписей = РегистрыСведений.мзЗадания.СоздатьНаборЗаписей();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей.Отбор.Ключ.Установить(Выборка.Ключ);
		НаборЗаписей.Записать();
	КонецЦикла;
КонецПроцедуры
// }
